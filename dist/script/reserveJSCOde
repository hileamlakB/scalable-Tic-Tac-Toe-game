 // let gameStarted = false;
    // let turn = "X";
    // let emptyArray = function(){
    //     return  [["","",""],
    //                 ["","",""],
    //                 ["","",""]]
    // }
    // let bordData = emptyArray()
    // $(".box").click(function(){

    //     //check if the game is already started and the playing mode is selected
    //     //if it isnt prompt a requiing message
    //     if (!gameStarted){
    //         if ($("#playerId").val() == 0){
    //             $(".message").append(
    //                 `<p>Choose an opponent First</p>`
    //             )

    //             $(".message").css("display",'flex')
    //             setTimeout(()=>{
    //                 $(".message").empty();
    //                 $(".message").css("display","none")},2000)
    //         }
    //         //if the playermode is choosen just start the game
    //         else{
    //             gameStarted = true;
    //         }
    //     }

    //     //if the game is already started choose the player mode and 
    //     // take the aproperiate action
    //     if (gameStarted){
    //         // if the game mode is with another player put the value and then 
    //         //chekc the game status
    //         if ($("#playerId").val() == 2){
               
    //             let col = parseInt(this.parentElement.id), row = parseInt(this.id); 
                
    //            if( $(this).html() == ''){
    //                 $(this).append(`<p>${turn}</p>`)
    //                 bordData[col][row] = turn;

    //                 turn = (turn=='X')?"O":"X"
    //             }

    //             //check if the game is already oveer or 
    //             //still continuing
    //             let statusCheckResult = checkStatus(bordData)
               
    //             if(statusCheckResult){
    //                 gameWon(statusCheckResult.slice(1,3))
    //             }
    //         }
            
    //     }
       


    // });

    // function reset(){

    // }

    // function checkStatus(board){

    //     //check if the game is over in the row
    //     for (let i=0; i<board.length;i++){
           
    //        //
    //        let rowStatus = checkRowStatus(board[i])
    //         if(rowStatus[0]){
    //             //[winingStartinggRow, windingStargincol]
    //             return [true,[i,rowStatus[1]],"row"]
                

    //         }
            
    //     }
        
    //     //check if the game is over on the col
    //     board = reverse(board)
        
    //     for (let i=0; i<board.length;i++){
           
    //        //
    //        let colStatus = checkRowStatus(board[i])
    //         if(colStatus[0]){
    //             //[winingStartinggRow, windingStargincol]
    //             return [true,[colStatus[1],i],"col"]
                

    //         }
            
    //     }
    //     //check if the game is over on the diagonal

       
    //     return false
    // }
    // function checkRowStatus(row){

    //     for(let i=0; i<row.length - 2;i++){

    //         //slice a row of length three and see if 
    //         //they are equal if the are we got  a winner if they 
    //         //arent we will go the next
    //         if(checkEquality(row.slice(i,i+3))){
    //             return [true,i]
    //         }
           
            
         
    //     }
    //     return false

    // }
    // function checkEquality(list){

    //     for(let j=0; j<list.length;j++){
    //         //if one of them is false you can be
    //         //sure that the game isnt over so handle that case here
    //         if(list[j] == ''){
                
    //             return false
    //         }
    //         if (list[j]!=list[0]){
    //             return false;
    //         }
    //     }
    //     return true;

    // }
    // function reverse(list){

        
    //     newList = []
    //     for(let i=0; i<list.length;i++){
    //         newList.push([])
    //         for(let j=0; j<list[0].length;j++){
            
    //             newList[i].push("")
    //         }
            
    //     }

    //     for(let i=0;i<list.length;i++){
    //         for(let j=0;j<list[i].length;j++){
    //             newList[j][i] = list[i][j];
    //         }

    //     }

    

    //     console.log(newList.length)
    //     return(newList)

    // }
    // function gameWon(winPos){
    //     //draw Streak
    //     let value = $(document.body.getElementsByClassName("col")[winPos[0][0]].getElementsByClassName("box")[winPos[0][1]]).text()
        
    //     if(winPos[1]=="row"){
    //         for(let i=winPos[0][1]; i<winPos[0][1]+3; i++){
    //             $(document.body.getElementsByClassName("col")[winPos[0][0]].getElementsByClassName("box")[i]).css('background-color','whitesmoke')
    //             $(document.body.getElementsByClassName("col")[winPos[0][0]].getElementsByClassName("box")[i]).html(`<p><del>${value}<del><p>`)
    //         }
    //     }
    //     if(winPos[1]=="col"){
    //         for(let i=winPos[0][0]; i<winPos[0][0]+3; i++){
    //             $(document.body.getElementsByClassName("col")[i].getElementsByClassName("box")[winPos[0][1]]).css('background-color','whitesmoke')
    //             $(document.body.getElementsByClassName("col")[i].getElementsByClassName("box")[winPos[0][1]]).html(`<p><del>${value}<del><p>`)
    //         }
    //     }
    //     $(".message").append(`<p>Player ${value} Won! Congragtulation</p>`)
    //     $(".message").css("display",'flex')
        
        
    // }

    // $("#restart").click(function(){
    //     gameStarted=false;

    //     $(".message").empty()
    //     $(".message").css("display",'none');
       
    //     Array.from( document.body.getElementsByClassName("col")).forEach(
    //         eachCol=>{
    //             Array.from( eachCol.getElementsByClassName("box")).forEach(
    //                 eachRow =>{
    //                     $(eachRow).empty()
    //                     $(eachRow).css('background-color','white')
    //                 }

    //             )

                
    //         }
    //     )

    //     bordData = emptyArray()
        
    // }
    

    // );